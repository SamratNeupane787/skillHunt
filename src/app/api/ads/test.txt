import OpenAI from "openai";
import { v2 as cloudinary } from "cloudinary";
import AdsCreate from "../../../Models/ads.model";
import { connectMongoDB } from "../../../lib/mongodb";
import { NextResponse } from "next/server";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY, 
});

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

export async function POST(request) {
  try {
    const form = await request.formData();
    const title = form.get("title");
    const description = form.get("description");
    const date = form.get("date");
    const location = form.get("location");
    const image = form.get("image");
    const createdBy = form.get("createdBy");

    if (!title || !description || !date || !location || !image || !createdBy) {
      return NextResponse.json(
        { message: "All fields are required" },
        { status: 400 }
      );
    }

    await connectMongoDB();

    const moderationResponse = await openai.moderations.create({ input: `${title} ${description}` });
    if (moderationResponse.results[0].flagged) {
      return NextResponse.json(
        { message: "Ad content contains inappropriate text." },
        { status: 400 }
      );
    }

    const fileBuffer = await image.arrayBuffer();
    const uploadResult = await new Promise((resolve, reject) => {
      const stream = cloudinary.uploader.upload_stream(
        { folder: "ads", moderation: "google" },  // Google Vision AI for NSFW
        (error, result) => (result ? resolve(result) : reject(error))
      );
      stream.end(Buffer.from(fileBuffer));
    });

    if (uploadResult.moderation_status === "rejected") {
      return NextResponse.json(
        { message: "Image rejected due to NSFW content." },
        { status: 400 }
      );
    }

    const newAd = await AdsCreate.create({
      title,
      description,
      location,
      date,
      createdBy,
      imagePath: uploadResult.secure_url,
    });

    return NextResponse.json(
      { message: "Ad created successfully", ad: newAd },
      { status: 201 }
    );
  } catch (error) {
    console.error("Server Error:", error);
    return NextResponse.json(
      { message: "Server error", error: error.message },
      { status: 500 }
    );
  }
}
